{"ast":null,"code":"var _jsxFileName = \"/Users/jonpalmer/Documents/react-clicky-game/react-clicky-game/src/components/ClickyGame.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"../components/navbar/\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport Banner from \"./Banner\";\nimport images from \"../images\";\n\nclass ClickyGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      score: 0,\n      highScore: 0,\n      navMsgColor: \"\",\n      navMessage: \"Click Image to Begin!\",\n      allCharacters: this.shuffleArray(),\n      wasClicked: [],\n      shake: false\n    };\n    this.clickEvent = this.checkClicked.bind(this);\n  }\n\n  shuffleArray() {\n    const newArr = images.slice();\n    const shuffleArr = [];\n\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    const prevState = this.state.wasClicked.slice();\n    const shuffled = this.shuffleArray();\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      if (score === highScore) {\n        score++;\n        highScore++;\n      } else {\n        score++;\n      }\n\n      prevState.push(clickedElem);\n    }\n\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: \"incorrect\",\n        navMessage: \"Incorrect guess!\",\n        allCharacters: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: \"correct\",\n      navMessage: \"You Guessed Correctly!\",\n      allCharacters: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n    return setTimeout(() => this.setState({\n      navMsgColor: \"\"\n    }), 500);\n  }\n\n  render() {\n    const state = this.state;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      score: state.score,\n      highScore: state.highScore,\n      navMessage: state.navMessage,\n      navMsgColor: state.navMsgColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(Banner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(Container, {\n      shake: state.shake,\n      characters: state.allCharacters,\n      clickEvent: this.clickEvent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ClickyGame;","map":{"version":3,"sources":["/Users/jonpalmer/Documents/react-clicky-game/react-clicky-game/src/components/ClickyGame.js"],"names":["React","Component","Navbar","Container","Footer","Banner","images","ClickyGame","state","score","highScore","navMsgColor","navMessage","allCharacters","shuffleArray","wasClicked","shake","clickEvent","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","prevState","shuffled","includes","setState","setTimeout","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Navbar from \"../components/navbar/\";\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport Banner from \"./Banner\";\nimport images from \"../images\";\n\n\nclass ClickyGame extends Component {\n    state = {\n\n        score: 0,\n        highScore: 0,\n       \n        navMsgColor: \"\",\n\n        navMessage: \"Click Image to Begin!\",\n\n        allCharacters: this.shuffleArray(),\n\n        wasClicked: [],\n\n        shake: false\n    };\n\n    clickEvent = this.checkClicked.bind(this);\n\n    shuffleArray() {\n        const newArr = images.slice();\n        const shuffleArr = [];\n\n        while (newArr.length > 0) {\n            shuffleArr.push(\n              newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]\n            );\n          }\n          return shuffleArr;\n    }\n\n    checkClicked(clickedElem) {\n        const prevState = this.state.wasClicked.slice();\n\n        const shuffled = this.shuffleArray();\n\n        let score = this.state.score;\n        let highScore = this.state.highScore;\n\n        if (!this.state.wasClicked.includes(clickedElem)) {\n            \n            if (score === highScore) {\n              score++;\n              highScore++;\n      \n             \n            } else {\n              score++;\n            }\n      \n        \n            prevState.push(clickedElem);\n          }\n          if (this.state.wasClicked.includes(clickedElem)) {\n            let score = 0;\n            return this.setState({\n              score: score,\n              highScore: highScore,\n              navMsgColor: \"incorrect\",\n              navMessage: \"Incorrect guess!\",\n              allCharacters: shuffled,\n              wasClicked: [],\n              shake: true\n            });\n          }\n          this.setState({\n            score: score,\n            highScore: highScore,\n            navMsgColor: \"correct\",\n            navMessage: \"You Guessed Correctly!\",\n            allCharacters: shuffled,\n            wasClicked: prevState,\n            shake: false\n          });\n          return setTimeout(() => this.setState({ navMsgColor: \"\" }), 500);\n    }\n    render() {\n        const state = this.state;\n        return (\n          <div>\n            <Navbar\n              score={state.score}\n              highScore={state.highScore}\n              navMessage={state.navMessage}\n              navMsgColor={state.navMsgColor}\n            />\n            <Banner />\n            <Container\n              shake={state.shake}\n              characters={state.allCharacters}\n              clickEvent={this.clickEvent}\n            />\n            <Footer />\n          </div>\n        );\n      }\n\n}\n\nexport default ClickyGame;"]},"metadata":{},"sourceType":"module"}